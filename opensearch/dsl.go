package opensearch

import (
	"fmt"
)

const WETH = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
const WBNB = "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"

func dslGetTransfer(start, end uint64, wNativeAddr string) string {
	//template := `{"size":0,"timeout":"600s","query":{"bool":{"filter":{"range":{"Number":{"gte":%d,"lt":%d}}}}},"aggs":{"transfer":{"scripted_metric":{"init_script":"state.transfers = []; state.txs = [];","map_script":"\n\t\t  def parseInt(String x) {\n\t\t\t  new BigInteger(x, 16);\n\t\t  }\n\t\t  def parseIntDec(String x) {\n\t\t\t  new BigInteger(x, 10);\n\t\t  }\n\t\t  def decToHex(String x) {\n\t\t    if (x == null) return '0x0';\n\t\t\t  return '0x' + (new BigInteger(x, 10)).toString(16);\n\t\t  }\n\t\t  def topicToAddress(String topic) {\n\t\t\t  topic.replace('0x000000000000000000000000', '0x');\n\t\t  }\n\t\t  void addTransfer(BigInteger id, int type, int txid, String from, String to, String coin, BigInteger amount, Map extras, List transfers) {\n  \t\t  Map tf = new HashMap();\n  \t\t  tf['from'] = from;\n  \t\t  tf['to'] = to;\n  \t\t  tf['type'] = type;\n  \t\t  tf['txid'] = txid;\n  \t\t  tf['token'] = coin;\n  \t\t  tf['value'] = '0x' + amount.toString(16);\n  \t\t  tf['pos'] = id.longValue();\n  \t\t  if (extras.size() > 0) tf['extras'] = extras;\n  \t\t  transfers.add(tf);\n\t\t  }\n\t\t  void addTx(String ts, Integer n, Map tx, Map params, List txs, BigInteger baseFee) {\n\t\t\t  Map t = new HashMap();\n\t\t\t  t['from'] = tx['FromAddress'];\n\t\t\t  t['to'] = tx['ToAddress'] == '' ? tx['ConAddress'] : tx['ToAddress'];\n\t\t\t  t['txHash'] = tx['Hash'];\n\t\t\t  t['block'] = n;\n\t\t\t  t['index'] = tx['TxnIndex'];\n\t\t\t  t['time'] = ts;\n\t\t\t  t['value'] = decToHex(tx['Value']);\n\t\t\t  t['func'] = tx['CallFunction'];\n\t\t\t  // t['param'] = tx['CallParameter'];\n\t\t\t  t['isCreation'] = tx['ToAddress'] == '';\n\t\t\t  \n\t\t\t  t['feeInfo'] = new HashMap();\n\t\t\t  t['feeInfo']['gasPrice'] = decToHex(tx['GasPrice']);\n\t\t\t  t['feeInfo']['gasUsed'] = tx['GasUsed'];\n\t\t\t  if (baseFee != null) {\n  \t\t\t  t['feeInfo']['gasFeeCap'] = decToHex(tx['GasFeeCap']);\n  \t\t\t  t['feeInfo']['gasTipCap'] = decToHex(tx['GasTipCap']);\n  \t\t\t  t['feeInfo']['baseFee'] = '0x' + baseFee.toString(16);\n\t\t\t  }\n\t\t\t  txs.add(t);\n\t\t  }\n\t\t  \n\t\t  int n = params['_source']['Number'];\n\t\t  String ts = params['_source']['Timestamp'];\n\t\t  \n\t\t  BigInteger baseFee;\n\t\t  if (params['_source'].containsKey('BaseFee')) baseFee = parseIntDec(params['_source']['BaseFee']);\n\t\t  else baseFee = null;\n\t\t  \n\t\t  Map txMap = new HashMap();\n\t\t  def native = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n\t\t  def zero = '0x0000000000000000000000000000000000000000';\n\t\t  for (int i = 0; i < params['_source']['TxnCount']; i++) {\n\t\t\t  Map t = params['_source']['Transactions'][i];\n\t\t\t  if (!t['Status']) continue;\n\t\t\t  \n\t\t\t  String txHash = t['Hash'];\n\t\t\t  def id = BigInteger.valueOf(n).shiftLeft(16).or(BigInteger.valueOf(t['TxnIndex']));\n\t\t\t\n\t\t\t  if (!params['ignore_native']) {\n\t\t\t\t  if (t['Value'] != '0') {\n\t\t\t\t\t  String to = t['ToAddress'] != '' ? t['ToAddress'] : t['ConAddress'];\n\t\t\t\t\t  def amount = new BigInteger(t['Value']);\n\t\t\t\t\t  addTransfer(id, 1, 0, t['FromAddress'], to, native, amount, new HashMap(), state.transfers);\n\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t\t  for (it in t['InternalTxns']) {\n\t\t\t\t\t\tdef opcode = it['Type'];\n\t\t\t\t\t\t// CALL, SUICIDE, CREATE, CREATE2\n\t\t\t\t\t\tdef hasValue = (opcode == 241) || (opcode == 255) && (opcode == 245) && (opcode == 240);\n\t\t\t\t\t  if ((it['Value'] != '0') && !it['Revert'] && hasValue) {\n\t\t\t\t\t\t  String to = it['ToAddress'] != '' ? it['ToAddress'] : it['ConAddress'];\n\t\t\t\t\t\t  def amount = new BigInteger(it['Value']);\n\t\t\t\t\t\t  def extras = new HashMap();\n\t\t\t\t\t\t  if (opcode != 241) extras['opcode'] = opcode;\n\t\t\t\t\t\t  addTransfer(id, 2, it['Id'], it['FromAddress'], to, native, amount, extras, state.transfers);\n\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t\n\t\t\t  if (!params['ignore_erc20']) {\n\t\t\t\t  for (log in t['Logs']) {\n\t\t\t\t\t  if ((log['Topics'].getLength() == 0) || log['Revert']) continue;\n\t  \n\t\t\t\t\t  // ERC20 token Transfer\n\t\t\t\t\t  if (log['Topics'][0] == params['ERC20TransferEvent']) {\n\t\t\t\t\t\t  if (log['Topics'].getLength() >= 3) {\n\t\t\t\t\t\t\t  def amount = parseInt(log['Topics'].getLength() == 4 ? log['Topics'][3].substring(2, 66) : log['Data'].substring(2, 66));\n\t\t\t\t\t\t\t  def to_addr = topicToAddress(log['Topics'][2]);\n\t\t\t\t\t\t\t  def from_addr = topicToAddress(log['Topics'][1]);\n\t\t\t\t\t\t\t  if (to_addr.length() != 42) continue;\n\t\t\t\t\t\t\t  if (from_addr.length() != 42) continue;\n\t\t\t\t\t\t\t  addTransfer(id, 3, log['Id'], from_addr, to_addr, log['Address'], amount, new HashMap(), state.transfers);\n\t\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t  \n\t\t\t\t\t  // WETH event\n\t\t\t\t\t  if (log['Topics'][0] == params['WETHDepositEvent'] && params['WETHAddress'].contains(log['Address'])) {\n\t\t\t\t\t\t  def amount = parseInt(log['Data'].substring(2, 66));\n\t\t\t\t\t\t  addTransfer(id, 4, log['Id'], zero, topicToAddress(log['Topics'][1]), log['Address'], amount, new HashMap(), state.transfers);\n\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t\t  if (log['Topics'][0] == params['WETHWithdrawEvent'] && params['WETHAddress'].contains(log['Address'])) {\n\t\t\t\t\t\t  def amount = parseInt(log['Data'].substring(2, 66));\n\t\t\t\t\t\t  addTransfer(id, 5, log['Id'], topicToAddress(log['Topics'][1]), zero, log['Address'], amount, new HashMap(), state.transfers);\n\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t\t  \n\t\t\t\t\t  // ERC-1155\n\t\t\t\t\t  if (!params['ignore_erc1155']) {\n  \t\t\t\t\t  def isERC1155 = log['Topics'][0] == params['ERC1155TransferSingleEvent'] || log['Topics'][0] == params['ERC1155TransferBatchEvent'];\n  \t\t\t\t\t  if ((log['Topics'].getLength() == 4) && isERC1155) {\n  \t\t\t\t\t    def type = 6;\n  \t\t\t\t\t    if (log['Topics'][0] == params['ERC1155TransferBatchEvent']) type = 7;\n  \t\t\t\t\t    \n  \t\t\t\t\t    def operator = topicToAddress(log['Topics'][1]);\n    \t\t\t\t\t  def from_addr = topicToAddress(log['Topics'][2]);\n    \t\t\t\t\t  def to_addr = topicToAddress(log['Topics'][3]);\n          \t\t  def extras = new HashMap();\n          \t\t  extras['operator'] = operator;\n          \t\t  extras['data'] = log['Data'];\n  \t\t\t\t\t\t  addTransfer(id, type, log['Id'], from_addr, to_addr, log['Address'], new BigInteger('0'), extras, state.transfers);\n  \t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n  \t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n  \t\t\t\t\t\t\t  txMap[txHash] = true;\n  \t\t\t\t\t\t  }\n  \t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  }\n\t\t  }\n\t  ","combine_script":"return state","reduce_script":"\n\t\t  def res = new HashMap();\n\t\t  res['transfers'] = [];\n\t\t  res['txs'] = [];\n\t\t  for (s in states) {\n\t\t\t  res['transfers'].addAll(s['transfers']);\n\t\t\t  res['txs'].addAll(s['txs']);\n\t\t  }\n\t\t  return res;\n\t  ","params":{"ignore_native":false,"ignore_erc20":false,"ignore_erc1155":false,"ERC20TransferEvent":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","WETHDepositEvent":"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c","WETHWithdrawEvent":"0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65","ERC1155TransferSingleEvent":"0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","ERC1155TransferBatchEvent":"0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","WETHAddress":["%s"]}}}}}`
	template := `{"size":0,"timeout":"600s","query":{"bool":{"filter":{"range":{"Number":{"gte":%d,"lt":%d}}}}},"aggs":{"transfer":{"scripted_metric":{"init_script":"state.transfers = []; state.txs = [];","map_script":"\n\t\t  def parseInt(String x) {\n\t\t\t  new BigInteger(x, 16);\n\t\t  }\n\t\t  def parseIntDec(String x) {\n\t\t\t  new BigInteger(x, 10);\n\t\t  }\n\t\t  def decToHex(String x) {\n\t\t    if (x == null) return '0x0';\n\t\t\t  return '0x' + (new BigInteger(x, 10)).toString(16);\n\t\t  }\n\t\t  def topicToAddress(String topic) {\n\t\t\t  topic.replace('0x000000000000000000000000', '0x');\n\t\t  }\n\t\t  void addTransfer(BigInteger id, int type, int txid, String from, String to, String coin, BigInteger amount, Map extras, List transfers) {\n  \t\t  Map tf = new HashMap();\n  \t\t  tf['from'] = from;\n  \t\t  tf['to'] = to;\n  \t\t  tf['type'] = type;\n  \t\t  tf['txid'] = txid;\n  \t\t  tf['token'] = coin;\n  \t\t  tf['value'] = '0x' + amount.toString(16);\n  \t\t  tf['pos'] = id.longValue();\n  \t\t  if (extras.size() > 0) tf['extras'] = extras;\n  \t\t  transfers.add(tf);\n\t\t  }\n\t\t  void addTx(String ts, Integer n, Map tx, Map params, List txs, BigInteger baseFee) {\n\t\t\t  Map t = new HashMap();\n\t\t\t  t['from'] = tx['FromAddress'];\n\t\t\t  t['to'] = tx['ToAddress'] == '' ? tx['ConAddress'] : tx['ToAddress'];\n\t\t\t  t['txHash'] = tx['Hash'];\n\t\t\t  t['block'] = n;\n\t\t\t  t['index'] = tx['TxnIndex'];\n\t\t\t  t['time'] = ts;\n\t\t\t  t['value'] = decToHex(tx['Value']);\n\t\t\t  t['func'] = tx['CallFunction'];\n\t\t\t  t['param'] = tx['CallParameter'];\n\t\t\t  t['isCreation'] = tx['ToAddress'] == '';\n\t\t\t  \n\t\t\t  t['feeInfo'] = new HashMap();\n\t\t\t  t['feeInfo']['gasPrice'] = decToHex(tx['GasPrice']);\n\t\t\t  t['feeInfo']['gasUsed'] = tx['GasUsed'];\n\t\t\t  if (baseFee != null) {\n  \t\t\t  t['feeInfo']['gasFeeCap'] = decToHex(tx['GasFeeCap']);\n  \t\t\t  t['feeInfo']['gasTipCap'] = decToHex(tx['GasTipCap']);\n  \t\t\t  t['feeInfo']['baseFee'] = '0x' + baseFee.toString(16);\n\t\t\t  }\n\t\t\t  txs.add(t);\n\t\t  }\n\t\t  \n\t\t  int n = params['_source']['Number'];\n\t\t  String ts = params['_source']['Timestamp'];\n\t\t  \n\t\t  BigInteger baseFee;\n\t\t  if (params['_source'].containsKey('BaseFee')) baseFee = parseIntDec(params['_source']['BaseFee']);\n\t\t  else baseFee = null;\n\t\t  \n\t\t  Map txMap = new HashMap();\n\t\t  def native = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n\t\t  def zero = '0x0000000000000000000000000000000000000000';\n\t\t  for (int i = 0; i < params['_source']['TxnCount']; i++) {\n\t\t\t  Map t = params['_source']['Transactions'][i];\n\t\t\t  if (!t['Status']) continue;\n\t\t\t  \n\t\t\t  String txHash = t['Hash'];\n\t\t\t  def id = BigInteger.valueOf(n).shiftLeft(16).or(BigInteger.valueOf(t['TxnIndex']));\n\t\t\t\n\t\t\t  if (!params['ignore_native']) {\n\t\t\t\t  if (t['Value'] != '0') {\n\t\t\t\t\t  String to = t['ToAddress'] != '' ? t['ToAddress'] : t['ConAddress'];\n\t\t\t\t\t  def amount = new BigInteger(t['Value']);\n\t\t\t\t\t  addTransfer(id, 1, 0, t['FromAddress'], to, native, amount, new HashMap(), state.transfers);\n\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t\t  for (it in t['InternalTxns']) {\n\t\t\t\t\t\tdef opcode = it['Type'];\n\t\t\t\t\t\t// CALL, SUICIDE, CREATE, CREATE2\n\t\t\t\t\t\tdef hasValue = (opcode == 241) || (opcode == 255) && (opcode == 245) && (opcode == 240);\n\t\t\t\t\t  if ((it['Value'] != '0') && !it['Revert'] && hasValue) {\n\t\t\t\t\t\t  String to = it['ToAddress'] != '' ? it['ToAddress'] : it['ConAddress'];\n\t\t\t\t\t\t  def amount = new BigInteger(it['Value']);\n\t\t\t\t\t\t  def extras = new HashMap();\n\t\t\t\t\t\t  if (opcode != 241) extras['opcode'] = opcode;\n\t\t\t\t\t\t  addTransfer(id, 2, it['Id'], it['FromAddress'], to, native, amount, extras, state.transfers);\n\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t\n\t\t\t  if (!params['ignore_erc20']) {\n\t\t\t\t  for (log in t['Logs']) {\n\t\t\t\t\t  if ((log['Topics'].getLength() == 0) || log['Revert']) continue;\n\t  \n\t\t\t\t\t  // ERC20 token Transfer\n\t\t\t\t\t  if (log['Topics'][0] == params['ERC20TransferEvent']) {\n\t\t\t\t\t\t  if (log['Topics'].getLength() >= 3) {\n\t\t\t\t\t\t\t  def amount = parseInt(log['Topics'].getLength() == 4 ? log['Topics'][3].substring(2, 66) : log['Data'].substring(2, 66));\n\t\t\t\t\t\t\t  def to_addr = topicToAddress(log['Topics'][2]);\n\t\t\t\t\t\t\t  def from_addr = topicToAddress(log['Topics'][1]);\n\t\t\t\t\t\t\t  if (to_addr.length() != 42) continue;\n\t\t\t\t\t\t\t  if (from_addr.length() != 42) continue;\n\t\t\t\t\t\t\t  addTransfer(id, 3, log['Id'], from_addr, to_addr, log['Address'], amount, new HashMap(), state.transfers);\n\t\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t  \n\t\t\t\t\t  // WETH event\n\t\t\t\t\t  if (!params['ignore_wethdw'] && log['Topics'][0] == params['WETHDepositEvent'] && params['WETHAddress'].contains(log['Address'])) {\n\t\t\t\t\t\t  def amount = parseInt(log['Data'].substring(2, 66));\n\t\t\t\t\t\t  addTransfer(id, 4, log['Id'], zero, topicToAddress(log['Topics'][1]), log['Address'], amount, new HashMap(), state.transfers);\n\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t\t  if (!params['ignore_wethdw'] && log['Topics'][0] == params['WETHWithdrawEvent'] && params['WETHAddress'].contains(log['Address'])) {\n\t\t\t\t\t\t  def amount = parseInt(log['Data'].substring(2, 66));\n\t\t\t\t\t\t  addTransfer(id, 5, log['Id'], topicToAddress(log['Topics'][1]), zero, log['Address'], amount, new HashMap(), state.transfers);\n\t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n\t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n\t\t\t\t\t\t\t  txMap[txHash] = true;\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t\t  \n\t\t\t\t\t  // ERC-1155\n\t\t\t\t\t  if (!params['ignore_erc1155']) {\n  \t\t\t\t\t  def isERC1155 = log['Topics'][0] == params['ERC1155TransferSingleEvent'] || log['Topics'][0] == params['ERC1155TransferBatchEvent'];\n  \t\t\t\t\t  if ((log['Topics'].getLength() == 4) && isERC1155) {\n  \t\t\t\t\t    def type = 6;\n  \t\t\t\t\t    if (log['Topics'][0] == params['ERC1155TransferBatchEvent']) type = 7;\n  \t\t\t\t\t    \n  \t\t\t\t\t    def operator = topicToAddress(log['Topics'][1]);\n    \t\t\t\t\t  def from_addr = topicToAddress(log['Topics'][2]);\n    \t\t\t\t\t  def to_addr = topicToAddress(log['Topics'][3]);\n          \t\t  def extras = new HashMap();\n          \t\t  extras['operator'] = operator;\n          \t\t  extras['data'] = log['Data'];\n  \t\t\t\t\t\t  addTransfer(id, type, log['Id'], from_addr, to_addr, log['Address'], new BigInteger('0'), extras, state.transfers);\n  \t\t\t\t\t\t  if (!txMap.containsKey(txHash)) {\n  \t\t\t\t\t\t\t  addTx(ts, n, t, params, state.txs, baseFee);\n  \t\t\t\t\t\t\t  txMap[txHash] = true;\n  \t\t\t\t\t\t  }\n  \t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  }\n\t\t  }\n\t  ","combine_script":"return state","reduce_script":"\n\t\t  def res = new HashMap();\n\t\t  res['transfers'] = [];\n\t\t  res['txs'] = [];\n\t\t  for (s in states) {\n\t\t\t  res['transfers'].addAll(s['transfers']);\n\t\t\t  res['txs'].addAll(s['txs']);\n\t\t  }\n\t\t  return res;\n\t  ","params":{"ignore_native":false,"ignore_erc20":false,"ignore_wethdw":true,"ignore_erc1155":true,"ERC20TransferEvent":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","WETHDepositEvent":"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c","WETHWithdrawEvent":"0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65","ERC1155TransferSingleEvent":"0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","ERC1155TransferBatchEvent":"0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","WETHAddress":["%s"]}}}}}`
	return fmt.Sprintf(template, start, end, wNativeAddr)
}
